{"name":"Технологии для БЭМ-стека","tagline":"Технологии, которые можно использовать для приложения на полном БЭМ-стеке","body":"## Содержание\r\n\r\n* [На клиенте](#frontend)\r\n* [На сервере](#backend)\r\n* [Хостинг и облака](#hosting)\r\n\r\n<a name=\"frontend\"></a>\r\n### Клиент\r\n\r\n* [БЭМ](https://ru.bem.info/) — главный ресурс с исчерпывающей информацией по БЭМ (рекомендую использовать кнопку [\"Быстрый старт\"](https://ru.bem.info/tutorials/quick-start-static)). А также прогулятся по всем разделам ресурса (начать лучше с [методологии](https://ru.bem.info/method/) и [FAQ](https://ru.bem.info/faq/)).\r\n  * [БЭМ-компоненты](https://github.com/bem/bem-components/blob/v2.3.0/README.ru.md) — тут кратко собрано все из чего состоит БЭМ. Собрано большое количество ссылок на внешние ресурсы об инструментах, которые упоминиаются в лекциях ([ссылка](https://github.com/bem/bem-components/blob/v2.3.0/README.ru.md#Инструменты)).\r\n  * [Мастер-класс по БЭМ](https://github.com/yuriMalakhov/do-it-yourself-workshop) — удобный способ выполнения заданий по БЭМ, необходимых для начального усвоения методологии. Стоит также посмотреть [лекцию](https://events.yandex.ru/lib/talks/2185/). Кроме того, есть [инструкции](https://github.com/dab/bemup-workshop-vagrant/blob/master/README.ru.md) для пользователей windows.\r\n  * Список очень полезных лекций стоит посмотреть [тут](https://events.yandex.ru/lib/talks/?audience=frontenderyi&tech=bem). Например, про полный стек [БЭМ-технологий](https://events.yandex.ru/lib/talks/1922/).\r\n* [ENB-сборщик](https://ru.bem.info/tools/bem/enb-bem/) — писать можно на любых технологиях с любыми препроцессорами, а потом все собирать с ENB.\r\n\r\n<a name=\"backend\"></a>\r\n### Сервер\r\n\r\n* [Sails](http://sailsjs.org/) и [EXPRESS](http://expressjs.com/) — 2 основых nodejs-фреймворка, которые используются во всех примерах для full-stack БЭМ.\r\n  * Sails базируется на Express и предлагает более удобную реализацию в рамках MVC подхода и организацию файлов внутри проекта (по личному опыту).\r\n  * Sails предлагает удобное подключение всевозможных адаптеров для баз данных:\r\n    описание модели в JSON (+ автоматические миграции)\r\n      => подключение адаптера\r\n      => использование любой БД\r\n      => [REST API](http://sailsjs.org/documentation/reference/blueprint-api?q=blueprint-routes) из коробки без доп. настроек.\r\n  * [Генератор для связки БЭМ и Sails](https://ru.bem.info/built-with-b/#sails-bem-project-stub)\r\n  * [Фреймворк для одностраничных приложений](https://ru.bem.info/built-with-b/#bnsf)\r\n* [Passport](http://passportjs.org/) — для  реализации авторизации на сайте.\r\n\r\n<a name=\"hosting\"></a>\r\n### Хостинг и облака\r\n\r\n* [Node-hosting](https://github.com/nodejs/node-v0.x-archive/wiki/Node-Hosting) — сводная таблица с кратким описанием хостингов, поддерживающих nodejs и websockets из коробки. Из бесплатных стоит выделить:\r\n  * [Heroku](http://heroku.com/)\r\n    * Плюсы: интеграция с GitHub, большое количество add-ons (базы данных, мониторинг, и тд.), удобный deploy и доступ к приложению из командной строки.\r\n    * Минусы: если приложение не используется, то \"засыпает\" через 30 минут и достаточно долго просыпается потом. Можно обойти с помощью [HostTracker](http://www.host-tracker.com/), если настроить проверку приложения чаще чем в 30 минут. Кроме того, если выходить за рамки бесплатных услуг, то все стоит достаточно дорого.\r\n  * [Qt Cloud Services](http://qtcloudservices.com/) — есть интеграция с GitHub, приятный интерфейс. Приложение не засыпает, поддержка MongoDB.\r\n  * [OpenShift](https://www.openshift.com/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}